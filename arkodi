#!/usr/bin/env bash

. ./utils.sh
platforms="$(platform_list)"

read -r -d '' usage << EOF
Install Arch and Kodi on a SD Card
Usage:
  $0 [OPTION [VALUE]]... DRIVE
Options:
  -c  [filename] use config file
  -p  [[${platforms// /]|}] platform
  -h  show this help and quit
Example:
  $0 -p rpi-2 /dev/mmcblk0
EOF

filesystem='ArchLinuxARM-PLATFORM-latest.tar.gz'
url='http://archlinuxarm.org/os/'

depends='bsdtar curl fdisk lsblk md5sum mkfs.ext4 mkfs.vfat sudo udevadm'

set -o errexit
set -o nounset
set -o pipefail
#set -o xtrace

drive_check() {

  if ! lsblk "${drive}" &> /dev/null; then
    error "A SD Card drive is expected\n${usage}"
  fi

  if mount | grep --silent ${drive}; then
    error "${drive} should not be mounted"
  fi

  for block in /sys/block/*; do
    info="$(udevadm info --query=property --path=${block})"
    if echo "${info}" | grep --silent "DEVNAME=${drive}";then
      if echo "${info}" | grep --silent "ID_DRIVE_FLASH_SD"; then
        return
      fi
    fi
  done

  echo -e "\e[33mWARNING\e[m: ${drive} is not a SD Card drive."
  if ! confirm 'Do you want to proceed'; then
    exit
  fi
}

resume_check() {
  local firstrun="$(firstrun_config ${config} | sed 's/^/  /')"
  cat <<-EOF
Filesystem: ${filesystem}
Platform:   ${platform}
Drive:      ${drive}
First run:
${firstrun}
EOF

  echo -e "\e[33mWARNING\e[m: This will destroy the content of ${drive}"
  if ! confirm 'Do you want to proceed'; then
    exit
  fi
}

download_check() {
  while true; do
    curl --remote-name --location ${url}${filesystem}.md5
    if md5sum --status --check ${filesystem}.md5; then
      break
    fi
    if [ -f ${filesystem} ]; then
      if ! confirm "${filesystem} MD5 does not match, re-download it"
      then
        exit
      fi
    fi
    curl --remote-name --location ${url}${filesystem}
  done
}

proceed() {

  local script="o\np\nn\np\n1\n\n+100M\nt\nc\nn\np\n2\n\n\nw"
  local filesystem="$1"
  local firstrun="$2"
  local drive="$3"

  echo -e ${script} | fdisk ${drive}

  mkdir -p boot root

  local partition=$(ls ${drive}?* | sort | head -n 1)
  mkfs.vfat "${partition}"
  mount "${partition}" boot

  local partition=$(ls ${drive}?* | sort | tail -n 1)
  mkfs.ext4 -F ${partition}
  mount "${partition}" root

  bsdtar -xpf "${filesystem}" -C root
  sync

  mkdir -p root/etc/firstrun
  cp ${firstrun}/* root/etc/firstrun

  cp firstrun/firstrun.service root/etc/systemd/system/

  mkdir -p root/etc/systemd/system/network-online.target.wants/
  ln -s /etc/systemd/system/firstrun.service \
    root/etc/systemd/system/multi-user.target.wants/

  mv root/boot/* boot/
  umount boot root

  rm --recursive --force boot root
}

prepare_firstrun() {

  local firstrun=$1
  while read -r  line; do
    [[ $line == \#* ]] && continue
    local item=$(echo "firstrun/$line" | cut -d' ' -f1)
    local output="$firstrun/$(basename $item)"
    if [ -f "$item" ]; then
      local args="${line#${item#firstrun/} }"
      if [ "$args" != "$line" ]; then
        echo -e "function ArkodiFirstRun() {\n" > $output
        cat "$item" >> $output
        echo -e "}\nArkodiFirstRun $args" >> $output
      else
        cat "$item" >> $output
      fi
    fi
    chmod +x $output
  done < <(firstrun_config ${config:-})
}

main() {

  drive="${1:-}"
  filesystem="${filesystem/PLATFORM/${platform}}"

  drive_check
  depends_check ${depends}
  download_check
  resume_check

  local firstrun="$(mktemp --directory)"
  prepare_firstrun $firstrun

  if [ "$(whoami)" = "root" ]; then
    proceed ${filesystem} ${firstrun} ${drive}
  else
    sudo --reset-timestamp bash -c "$(declare -f proceed);
    proceed ${filesystem} ${firstrun} ${drive}"
  fi

  rm --recursive --force "${firstrun}"
}

platform="${platforms/ */}"

while getopts 'c:p:h' opt; do
  case "${opt}" in
  c) config="$OPTARG" ;;
  p) platform="$OPTARG" ;;
  *) echo "${usage}"; exit ;;
  esac
done

shift $((OPTIND-1))
main "$@"

# vim: ts=2 sw=2 sts=2 expandtab smartindent smarttab

