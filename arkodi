#!/usr/bin/env bash

platforms='rpi rpi-2'

read -r -d '' usage << EOF
Install Arch and Kodi on a SD Card
Usage: $0 [PLATFORM] DRIVE
Parameters:
  PLATFORM  [[${platforms// /]|}] the device platform
  DRIVE     the SD Card drive
EOF

filesystem='ArchLinuxARM-PLATFORM-latest.tar.gz'
url='http://archlinuxarm.org/os/'

depends='bsdtar fdisk lsblk md5sum mkfs.ext4 mkfs.vfat sudo udevadm wget'

set -o errexit
set -o nounset
set -o pipefail
#set -o xtrace

EXIT_SUCCESS="$(true && echo $?)"
EXIT_FAILURE="$(false || echo $?)"

error() {
  echo -e "\e[31mERROR\e[m $@" >&2
  exit ${EXIT_FAILURE}
}

depends_check() {
  for depend in ${depends}; do
    if [ $(grep "${depend}" "$0" | wc -l) -lt 2 ]; then
      echo -e "\e[33mINFO\e[m ${depend} is not a dependency" >&2
    elif ! which ${depend} &> /dev/null; then
      error "This script depens on ${depend}" >&2
    fi
  done
}

drive_check() {

  if ! lsblk "${drive}" &> /dev/null; then
    error "A SD Card drive is expected\n${usage}"
  fi

  if mount | grep --silent ${drive}; then
    error "${drive} should not be mounted"
  fi

  for block in /sys/block/*; do
    info="$(udevadm info --query=property --path=${block})"
    if echo "${info}" | grep --silent "DEVNAME=${drive}";then
      if echo "${info}" | grep --silent "ID_DRIVE_FLASH_SD"; then
        return
      fi
    fi
  done

  error "${drive} is not a SD Card drive."
}

confirm() {
  echo "$@ (yes/no)?"
  read response
  if [ "${response}" != "yes" -a "${response}" != "no" ]; then
    error 'The response should be "yes" or "no"'
  elif [ "${response}" = "no" ]; then
    return ${EXIT_FAILURE}
  else
    return ${EXIT_SUCCESS}
  fi
}

resume_check() {

  cat <<-EOF
Filesystem: ${filesystem}
Platform:   ${platform}
Drive:      ${drive}
EOF

  echo -e "\e[33mWARNING\e[m: This will destroy the content of ${drive}"
  if ! confirm 'Do you want to proceed'; then
    exit
  fi
}

download_check() {
  wget --continue ${url}${filesystem}.md5
  while true; do
    if md5sum --status --check ${filesystem}.md5; then
      break
    fi
    if [ -f ${filesystem} ]; then
      if ! confirm 'Do you want to re-download'; then
        exit
      fi
    fi
    wget --continue ${url}${filesystem}
  done
}

proceed() {

  local script="o\np\nn\np\n1\n\n+100M\nt\nc\nn\np\n2\n\n\nw"
  local filesystem="$1"
  local drive="$2"

  echo -e ${script} | fdisk ${drive}

  mkdir -p boot root

  local partition=$(ls ${drive}?* | sort | head -n 1)
  mkfs.vfat "${partition}"
  mount "${partition}" boot

  local partition=$(ls ${drive}?* | sort | tail -n 1)
  mkfs.ext4 ${partition}
  mount "${partition}" root

  bsdtar -xpf ${filesystem} -C root
  sync

  mv root/boot/* boot
  umount boot root

  rm --recursive --force boot root
}

main() {

  drive="${2:-$1}"
  platform="${2:+$1}"

  platform="${platform:-${platforms/ */}}"
  filesystem="${filesystem/PLATFORM/${platform}}"

  depends_check
  drive_check
  resume_check
  download_check

  if [ "$(whoami)" = "root" ]; then
    proceed "${filesystem}" "${drive}"
  else
    sudo --reset-timestamp bash -c "$(declare -f proceed);
    proceed ${filesystem} ${drive}"
  fi
}

if [ $# -lt 1 ]; then
  echo "${usage}"
else
  main "$@"
fi

# vim: ts=2 sw=2 sts=2 expandtab smartindent smarttab

